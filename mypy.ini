[mypy]

# Files are passed on mypy invocation.
files =
  scripts/host-check,
  scripts/xr-compose

# Exclude paths.
exclude = (?x)(
  ^tests/
  | venv.*/
  )

# Warns about per-module sections in the config file that do not match any
# files processed when invoking mypy. Useful to avoid e.g. sections regarding
# files which have since been removed.
warn_unused_configs = True

# Disallows usage of generic types that do not specify explicit type
# parameters. For example, disallows
# ```
# def foo() -> list:
# ```
# in favour of an explicit e.g. `list[str]`.
disallow_any_generics = True

# Disallows subclassing a value of type `Any`. For example, disallows
# ```
# from foo import Bar
# Baz: Any = Bar
# class Qux(Baz)
# ```
disallow_subclassing_any = True

# Disallows any function definitions which are not fully typed (all args and
# return type).
disallow_untyped_defs = True

# Disallows any function definitions which are partially typed. Implied by
# `disallow_untyped_defs` but useful to have set to True so that
# `disallow_untyped_defs` can be set to False on a per-module basis without
# losing `disallow_incomplete_defs`.
disallow_incomplete_defs = True

# Reports an error whenever a function with type annotations is decorated with
# a decorator without annotations.
disallow_untyped_decorators = True

# Disallows definitions like
# ```
# def foo(bar: str = None):
# ```
# With `no_implicit_optional` turned on, this is mandated to be
# ```
# def foo(bar: Optional[str] = None):
# ```
no_implicit_optional = True

# Warns about casting an expression to its inferred type. For example, warns
# about the following code:
# ```
# from typing import cast
#
# def foo(bar: str):
#     print(cast(str, bar))
# ```
warn_redundant_casts = True

# Warns about unneeded `# type: ignore` comments.
warn_unused_ignores = True

# Shows a warning when returning a value with type `Any` from a function
# declared with a non-`Any` return type.
warn_return_any = True

# By default, imported values to a module are treated as exported and mypy
# allows other modules to import them. With `no_implicit_reexport=True`, mypy
# will not re-export unless the item is imported using from-as or is included
# in `__all__`.
# For example:
# ```
# # This won't re-export the value
# from foo import bar
#
# # This will re-export it as bar and allow other modules to import it
# from foo import bar as bar
#
# # This will also re-export bar
# from foo import bar
# __all__ = ['bar']
# ```
no_implicit_reexport = True

# Disalow equality checks between non-overlapping types
strict_equality = True

# Show error codes - useful to be able to ignore specific errors
show_error_codes = True

# Required for running on scripts without a .py extension
scripts_are_modules = True

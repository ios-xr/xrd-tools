#!/usr/bin/env bash

# Copyright 2020-2022 Cisco Systems Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e

usage () {
    echo "Usage: $(basename "$0") [-h|--help] [--new-packages] IMAGE SOURCE ..."
}

detailed_usage () {
    echo -n "
$(usage)

Create a new XRd image with bugfixes installed on top of a base image.

Required arguments:
  IMAGE            Loaded container image to install bugfixes on top of
  SOURCE           Path to source to install packages from - a directory
                   or tarball containing the rpm(s) to install.

Optional arguments:
  --new-packages   Install new packages if included in the bugfix source. By
                   default, only packages that are already installed in the
                   base image will be updated, so this should be passed if
                   any new packages are present in SOURCE.
  ...              Additional args passed through to 'docker build' (such as
                   --tag).

Example invocations:
  $(basename "$0") ios-xr/xrd-vrouter:25.1.1 /path/to/bugfixes.tar.gz --tag bugfix
  $(basename "$0") ios-xr/xrd-vrouter:25.1.1 /path/to/rpm-dir/ --tag bugfix

"
}

# ---------------------
# Parse args
# ---------------------

XR_CONTAINER_INSTALL_ARGS=""

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h | --help )
            detailed_usage
            exit 0
            ;;
        --new-packages )
            XR_CONTAINER_INSTALL_ARGS=("--all")
            shift
            ;;
        *)
            # Positional args
            if [[ ! $IMAGE ]]; then
                IMAGE="$1"
            elif [[ ! $SOURCE ]]; then
                SOURCE="$1"
            else
                break
            fi
            shift
            ;;
    esac
done


if [[ ! $IMAGE || ! $SOURCE ]]; then
    echo "Expected 'image' and 'source' arguments." >&2
    usage >&2
    exit 1
fi


# ---------------------
# Main logic
# ---------------------

TMPDIR=$(mktemp -d)
DOCKERFILE="$TMPDIR/Dockerfile"

trap '{ rm -r "$TMPDIR"; exit 1; }' EXIT

cp -r "$SOURCE" "$TMPDIR/source"

cat << EOF > "$DOCKERFILE"
FROM $IMAGE
COPY source /tmp/packages/
RUN xr_container_install /tmp/packages/ ${XR_CONTAINER_INSTALL_ARGS[@]}
RUN rm -rf /tmp/packages/
EOF

echo "Using Dockerfile:"
cat "$DOCKERFILE"
echo

# The default Dockerfile used is "Dockerfile" in the build dir.
docker build "$TMPDIR" "$@"

#!/usr/bin/env bash

# Copyright 2020-2022 Cisco Systems Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Helper script for launching a single XRd instance, wrapping 'docker run' or
# 'podman run'.
#

#
# Functions
# -----------------------------------------------------------------------------

_usage_short () {
    echo -n "\
Usage: $(basename "$0") [-h|--help] [-n|--dry-run] [<opts>] IMG
"
}

_usage_opts () {
    echo -n "\

Launch a single XRd container.

Use '--dry-run' to see the command that would be run without running it.

Required arguments:
  IMG                           Specify loaded container image to boot

Optional arguments:
  -f, --first-boot-config FILE  Path to startup config file for first boot
  -e, --every-boot-config FILE  Path to startup config file for every boot
  -v, --xrd-volume VOL          Name of volume used for persistency (created if
                                doesn't already exist)
  -p, --platform PLATFORM       XR platform to launch (defaults to checking the
                                image label)
  -k, --keep                    Keep the container around after it has stopped
  -c, --ctr-client EXE          Container client executable (defaults to
                                '$CONTAINER_EXE'), the name is used to determine
                                whether using docker or podman
  --name NAME                   Specify container name
  --privileged                  Run the container with extended privileges
  --interfaces IF_TYPE:IF_NAME[,IF_FLAG[,...]][;IF_TYPE:IF_NAME[...]...]
                                XR interfaces to create and their mapping to
                                underlying linux/pci interfaces
  --mgmt-interfaces linux:IF_NAME[,MG_FLAG[,...]][;linux:IF_NAME[...]...]
                                XR management interfaces to create and their
                                mapping to underlying linux interfaces (defaults
                                to a single interface mapped to eth0, pass \"\"
                                to prevent this)
  --first-boot-script FILE      Path to script to be run after all config has
                                been applied on the first boot
  --every-boot-script FILE      Path to script to be run after all config has
                                been applied on every boot
  --disk-limit LIMIT            Disk usage limit to impose (defaults to '6G')
  --ztp-enable                  Enable Zero Touch Provisioning (ZTP) to start
                                up after boot, by default ZTP is disabled
                                (cannot be used with IP snooping)
  --ztp-config FILE             Enable ZTP with custom ZTP ini configuration
  --boot-log-level LEVEL        Control the level at which boot logging starts
                                being printed to the console, one of: ERROR,
                                WARNING (default), INFO, DEBUG
  [--] <arg1> <arg2>            Extra arguments to pass to '<ctr_mgr> run'.
                                All unrecognised args and all args after '--'
                                separator will be passed to the container
                                manager. 'launch-xrd <arg1> IMG' or 'launch-xrd
                                -- <arg1> IMG' would become '<ctr_mgr> run
                                <arg1> IMG'

XRd Control Plane arguments:
  IF_TYPE := { linux }          Interface type
  IF_NAME := { * }              A linux interface name
  IF_FLAG := { xr_name | chksum | snoop_v[4|6] | snoop_v[4|6]_default_route }
                                Flags for interface configuration
  MG_FLAG := IF_FLAG            Flags for management interface configuration

XRd vRouter arguments:
  IF_TYPE := { pci | pci-range }
                                Interface type
  IF_NAME := { (IF_TYPE=pci)       BUS:SLOT.FUNC |
               (IF_TYPE=pci-range) lastN | firstN }
                                Either PCI address e.g. pci:00:09.0, or
                                selection of addresses e.g. pci-range:last4
  IF_FLAG := {}                 Flags for interface configuration
  MG_FLAG := { chksum | snoop_v[4|6] | snoop_v[4|6]_default_route }
                                Flags for management interface configuration
"
}

bad_usage () {
    _usage_short >&2
    exit 1
}

usage () {
    echo -n "\
$(_usage_short)

$(_usage_opts)
"
    exit 0
}

# Quote a bash command - the output can be directly run.
_quote_cmd() {
    # Python's shlex module is used as it gives cleaner output than bash's
    # 'printf "%q " "$@"' (quotes rather than backslash escapes).
    python3 -c \
        'import shlex, sys; print(" ".join(shlex.quote(x) for x in sys.argv[1:]))' \
        "$@"
}

# Either run the given command or output the command on stderr if DRY_RUN=1.
_runcmd() {
    if [[ $DRY_RUN == 1 ]]; then
        _quote_cmd "$@"
    else
        "$@"
    fi
}

# Get the platform from the labels on a container image.
#   Arg 1: image name
_get_platform() {
    local platform

    check_img_cmd=("$CONTAINER_EXE" "inspect" "$1" \
            "--format={{index .Config.Labels \"com.cisco.ios-xr.platform\"}}")

    if ! platform=$("${check_img_cmd[@]}" 2>/dev/null); then
        echo "Specified image is not loaded or a file path, attempting to pull..." >&2
        if "$CONTAINER_EXE" pull "$1" >&2; then
            platform=$("${check_img_cmd[@]}" 2>/dev/null)
        else
            echo "Unrecognised image '$1' - should be either an image loaded " \
                 "in the local $CONTAINER_MGR registry, an image file to be loaded, or an image that can be pulled." >&2
            return 1
        fi
    fi
    # Assert that the container image has the word "xrd" in it.
    if [[ $platform != *xrd* ]]; then
        echo "Error: Could not determine platform from image '$1' labels." >&2
        echo "Use '--platform' argument instead." >&2
        return 1
    fi
    echo -n "$platform"
}


#
# Parse args
# -----------------------------------------------------------------------------

DRY_RUN=0
USE_RM=1
IS_PRIVILEGED=0
IS_ZTP_ENABLED=0
IMAGE=""
PLATFORM=""
FIRST_BOOT_CONFIG=""
EVERY_BOOT_CONFIG=""
FIRST_BOOT_SCRIPT=""
EVERY_BOOT_SCRIPT=""
ZTP_CONFIG=""
PERSIST_VOL=""
INTERFACES=""
DISK_LIMIT=""
EXTRA_ARGS=""
CONTAINER_EXE="docker"
# By default we provide a MgmtEth interface with chksum.
MGMT_INTERFACES="linux:eth0,chksum"


while [[ $# -gt 0 ]]; do
    case "$1" in
        -h | --help )
            usage
            ;;
        -n | --dry-run )
            DRY_RUN=1
            shift
            ;;
        -k | --keep )
            USE_RM=0
            shift
            ;;
        -f | --first-boot-config )
            FIRST_BOOT_CONFIG=$2
            shift 2
            ;;
        -e | --every-boot-config )
            EVERY_BOOT_CONFIG=$2
            shift 2
            ;;
        --first-boot-script )
            FIRST_BOOT_SCRIPT=$2
            shift 2
            ;;
        --every-boot-script )
            EVERY_BOOT_SCRIPT=$2
            shift 2
            ;;
        -v | --xrd-volume )
            PERSIST_VOL=$2
            shift 2
            ;;
        -p | --plat | --platform )
            PLATFORM=$2
            shift 2
            ;;
        -c | --ctr-client )
            CONTAINER_EXE=$2
            shift 2
            ;;
        --interfaces )
            INTERFACES=$2
            shift 2
            ;;
        --mgmt-interfaces )
            MGMT_INTERFACES=$2
            shift 2
            ;;
        --disk-limit )
            DISK_LIMIT=$2
            shift 2
            ;;
        --ztp-enable )
            IS_ZTP_ENABLED=1
            shift
            ;;
        --ztp-config )
            ZTP_CONFIG=$2
            shift 2
            ;;
        --boot-log-level )
            BOOT_LOG_LEVEL=$2
            shift 2
            ;;
        --privileged )
            IS_PRIVILEGED=1
            shift
            ;;
        --args )
            EXTRA_ARGS=$2
            shift 2
            ;;
        -- )
            shift
            if [[ $# == 0 ]]; then
                echo "Error: Expected at least one arg after the '--' separator." >&2
                bad_usage
            fi
            CTR_MGR_ARGS+=("$@")
            break
            ;;
        *)
            CTR_MGR_ARGS+=("$1")
            shift
            ;;
    esac
done

if [[ ${#CTR_MGR_ARGS[@]} -eq 0 ]]; then
    echo "Must specify container image" >&2
    bad_usage
else
    IMAGE="${CTR_MGR_ARGS[-1]}"
fi

#
# Validate arguments.
# -----------------------------------------------------------------------------

# Set the container manager.
if [[ $CONTAINER_EXE =~ "docker" ]]; then
    CONTAINER_MGR="docker"
elif [[ $CONTAINER_EXE =~ "podman" ]]; then
    CONTAINER_MGR="podman"
else
    echo "Error: Container executable '$CONTAINER_EXE' not found." >&2
    bad_usage
fi

# Obtain the platform from the chosen image.
if [[ $PLATFORM == "" ]]; then
    if ! PLATFORM="$(_get_platform "$IMAGE")"; then
        bad_usage
    fi
fi

# Validate based on XRd platform.
if [[ $PLATFORM == "xrd-control-plane" ]]; then
    : # Nothing to validate for XRd Control Plane
elif [[ $PLATFORM == "xrd-vrouter" ]]; then
    : # Nothing to validate for XRd vRouter
else
    echo "Error: Unknown platform '$PLATFORM'." >&2
    echo "Known platforms: xrd-control-plane, xrd-vrouter" >&2
    bad_usage
fi

#
# Determine args to pass to docker/podman.
# -----------------------------------------------------------------------------

run_args=()
caps_args=()
misc_args=()
env_args=()
mount_args=()
name_args=()

# Mount the startup config files and set the env vars.
if [[ $FIRST_BOOT_CONFIG ]]; then
    config_mount="/etc/xrd/first-boot.cfg"
    env_args+=("--env" "XR_FIRST_BOOT_CONFIG=$config_mount")
    mount_args+=("--mount" "type=bind,source=$(realpath "$FIRST_BOOT_CONFIG"),target=$config_mount")
fi
if [[ $EVERY_BOOT_CONFIG ]]; then
    config_mount="/etc/xrd/every-boot.cfg"
    env_args+=("--env" "XR_EVERY_BOOT_CONFIG=$config_mount")
    mount_args+=("--mount" "type=bind,source=$(realpath "$EVERY_BOOT_CONFIG"),target=$config_mount")
fi
if [[ $ZTP_CONFIG ]]; then
    script_mount="/etc/xrd/user-ztp.ini"
    env_args+=("--env" "XR_ENABLE_ZTP_WITH_INI=$script_mount")
    mount_args+=("--mount" "type=bind,source=$(realpath "$ZTP_CONFIG"),target=$script_mount")
fi
# Mount the boot scripts and set the env vars.
if [[ $FIRST_BOOT_SCRIPT ]]; then
    script_mount="/etc/xrd/first-boot-script"
    env_args+=("--env" "XR_FIRST_BOOT_SCRIPT=$script_mount")
    mount_args+=("--mount" "type=bind,source=$(realpath "$FIRST_BOOT_SCRIPT"),target=$script_mount")
fi
if [[ $EVERY_BOOT_SCRIPT ]]; then
    script_mount="/etc/xrd/every-boot-script"
    env_args+=("--env" "XR_EVERY_BOOT_SCRIPT=$script_mount")
    mount_args+=("--mount" "type=bind,source=$(realpath "$EVERY_BOOT_SCRIPT"),target=$script_mount")
fi

# Persist data by making and mounting a volume at /xr-storage/.
if [[ $PERSIST_VOL ]]; then
    if ! "$CONTAINER_EXE" volume inspect "$PERSIST_VOL" &> /dev/null; then
        CMD=("$CONTAINER_EXE" volume create "$PERSIST_VOL")
        if [[ $DRY_RUN == 1 ]]; then
            _runcmd "${CMD[@]}"
        else
            "${CMD[@]}" > /dev/null
        fi
    fi
    mount_args+=("--mount" "type=volume,source=$PERSIST_VOL,target=/xr-storage/")
fi


if [[ $IS_PRIVILEGED == 1 ]]; then
    caps_args+=("--privileged")
else
    # Unprivileged requires explicit list of capabilities.
    caps_args+=(
        "--cap-drop" "all"
        # Docker defaults required by XRd.
        "--cap-add" "AUDIT_WRITE"
        "--cap-add" "CHOWN"
        "--cap-add" "DAC_OVERRIDE"
        "--cap-add" "FOWNER"
        "--cap-add" "FSETID"
        "--cap-add" "KILL"
        "--cap-add" "MKNOD"
        "--cap-add" "NET_BIND_SERVICE"
        "--cap-add" "NET_RAW"
        "--cap-add" "SETFCAP"
        "--cap-add" "SETGID"
        "--cap-add" "SETUID"
        "--cap-add" "SETPCAP"
        "--cap-add" "SYS_CHROOT"
        # Extras required by XRd.
        "--cap-add" "IPC_LOCK"
        "--cap-add" "NET_ADMIN"
        "--cap-add" "SYS_ADMIN"
        "--cap-add" "SYS_NICE"
        "--cap-add" "SYS_PTRACE"
        "--cap-add" "SYS_RESOURCE"
    )
    misc_args+=(
        "--device" "/dev/fuse"
        "--device" "/dev/net/tun"
        # AppArmor and SELinux are not supported with the default profiles.
        "--security-opt" "apparmor=unconfined"
        "--security-opt" "label=disable"
    )
    # Add XRd vRouter specific unprivileged arguments:
    if [[ $PLATFORM == "xrd-vrouter" ]]; then
        caps_args+=(
            # Required for DPDK to use interfaces
            "--cap-add" "SYS_RAWIO"
        )

        misc_args+=(
            # Required for XRd vRouter to use vfio driver.
            "--device" "/dev/vfio"
        )
        # Podman bug -  Some newer versions give access to all devices, but
        # some older ones (seen on v3.3.1) do not. For docker, we pass
        # --device-cgroup-rule 'c *:* rwm', but podman's parsing of the first
        # asterisk was only fixed in v4.2.0.  So to allow access you have to
        # know the major device num to pass as e.g.
        # --device-cgroup-rule 'c 244:* rwm' (where the number can vary on
        # different hosts).
        if [[ $CONTAINER_MGR == docker ]]; then
            misc_args+=(
                # Allow XRd vRouter to create character devices for handling
                # packets.
                "--device-cgroup-rule" "c *:* rwm"
            )
        fi
    fi
fi

# Podman args wanted regardless of running in privileged.
if [[ $CONTAINER_MGR == podman ]]; then
    misc_args+=(
        # Podman's default pid limit is too low so set to unlimited.
        "--pids-limit" "0"
    )
fi

# General environment variables:
#  - interface mapping (XR -> Linux)
#  - checksum counteract interfaces
#  - disk usage limit
#  - ZTP configuring
if [[ $INTERFACES ]]; then
    env_args+=("--env" "XR_INTERFACES=$INTERFACES")
fi
if [[ $MGMT_INTERFACES ]]; then
    env_args+=("--env" "XR_MGMT_INTERFACES=$MGMT_INTERFACES")
fi
if [[ $DISK_LIMIT ]]; then
    env_args+=("--env" "XR_DISK_USAGE_LIMIT=$DISK_LIMIT")
fi
if [[ $IS_ZTP_ENABLED == 1 ]]; then
    env_args+=("--env" "XR_ZTP_ENABLE=1")
fi
if [[ $BOOT_LOG_LEVEL ]]; then
    env_args+=("--env" "XR_BOOT_LOG_LEVEL=$BOOT_LOG_LEVEL")
fi

if [[ $USE_RM == 1 ]]; then
    run_args+=("--rm")
fi

# shellcheck disable=SC2162
read -a extra_args <<< "$EXTRA_ARGS"

#
# Run the final container 'run' command
# -----------------------------------------------------------------------------

_runcmd \
    "$CONTAINER_EXE" run -it \
        "${run_args[@]}" \
        "${name_args[@]}" \
        "${caps_args[@]}" \
        "${misc_args[@]}" \
        "${mount_args[@]}" \
        "${env_args[@]}" \
        "${extra_args[@]}" \
        "${CTR_MGR_ARGS[@]}" || exit $?
